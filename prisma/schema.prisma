// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "generoid"]
}

model GeneroidUsers {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  chats     Chat[]
  createdAt DateTime @default(now())

  @@schema("generoid")
}

model Chat {
  id        String        @id @default(cuid())
  userId    String
  name      String // Chat name
  messages  Json
  user      GeneroidUsers @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())

  @@schema("generoid")
}

//TODO: add all prisma functions (eg for inserting a user, adding a chat etc) in a separate fie

// When you change your Prisma schema, follow these steps:

// For development (local machine):

// bashCopynpx prisma migrate dev --name description_of_changes
// This creates a new migration, applies it, and regenerates Prisma client.

// For production or staging:

// bashCopynpx prisma migrate deploy
// This applies migrations without generating client or creating migration files.
// General workflow:

// During development: Use prisma migrate dev
// When deploying to production: Use prisma migrate deploy
// After any schema changes: Always run npx prisma generate to update the client

// After every schema change on your local machine, you'll typically:

// Edit your schema.prisma
// Run npx prisma migrate dev --name <descriptive_name>
// Then push to your deployment environment and run prisma migrate deploy
